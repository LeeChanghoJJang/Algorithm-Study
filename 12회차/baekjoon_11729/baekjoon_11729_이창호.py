import sys

''' 기본원리
◆ 목표 : n개의 원판을 A 에서 C로 옮기는 것이 목표
1. A : n-1개의 원판 → B로 옮김 (A : 1개 / B: n-1개 / C: 0개)
2. A : 1개의 원판(젤 큰 원판) → C로 옮김 (A : 0개 / B: n-1개 / C: 1개)
3. B : n-1개의 원판 → C로 옮김 (A : 0개 / B: 0개 / C : n개)
→ n-1개를 1개로 치환하면 쉽게 생각할 수 있음.
→ n개부터 시작했을 때, 재귀함수를 이용하면 n-1, n-2 ... 1개까지 내려와서 이동을 하게 됨
'''
ㄹ
# 하노이 탑 문제를 해결하는 재귀 함수
def hanoi(n, start, end):
    # 기본 경우: 디스크가 하나만 있는 경우, 시작 기둥에서 끝 기둥으로 이동
    if n == 1:
        print(start, end)  # 시작 기둥에서 끝 기둥으로 디스크 이동
        return

    # 시작 기둥에서 남은 n-1개의 디스크를 보조 기둥으로 이동
    hanoi(n - 1, start, 6 - start - end)

    # 시작 기둥에서 가장 큰 디스크를 끝 기둥으로 이동
    print(start, end)

    # 보조 기둥에서 남은 n-1개의 디스크를 끝 기둥으로 이동
    hanoi(n - 1, 6 - start - end, end)


# 표준 입력에서 디스크의 개수를 읽음
n = int(input())

# 문제를 해결하는 데 필요한 총 이동 횟수를 계산하고 출력
print(2 ** n - 1)

# 하노이 함수를 호출하여 하노이 탑 문제를 해결
hanoi(n, 1, 3)
